---
name: Deploy Infrastructure

on: 
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  prep_matrix:
    name: Prepare Matrix
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Write matrix string to output
        id: set-matrix
        run: |
          $path = "./config/infra_" + "${{ inputs.environment }}" + ".json"
          echo "::debug::path=$path"
          $configEnv = Get-Content -Path $path | ConvertFrom-Json
          echo "::debug::configEnv=$configEnv"
          $matrix = ($configEnv | Select-Object DeployUnit | ConvertTo-Json -Depth 100 -Compress).Replace("`"", "'")
          echo "::debug::matrix=$matrix"
          $matrix = "{'include':" + $matrix + "}"
          echo "matrix=$matrix" >> $env:GITHUB_OUTPUT
        shell: pwsh

  deploy_matrix:
    needs: prep_matrix
    name: Deploy Infrastructure
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ${{ fromJson(needs.prep_matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Powershell error action
        if: success()
        run: |
          $global:ErrorActionPreference = "Stop"
          $ErrorActionPreference = "Stop"
        shell: pwsh

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Register RPs
        if: success()
        run: |
          az provider register --namespace "Microsoft.ChangeAnalysis" --accept-terms --consent-to-permissions --wait
        shell: pwsh

      - name: Set Config File Paths to Environment
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          Set-EnvVar2 -VarName "OE_CONFIG_FILE_ALL" -VarValue "./config/infra_all.json"
          Set-EnvVar2 -VarName "OE_CONFIG_FILE_ENV" -VarValue ("./config/infra_" + "${{ inputs.environment }}" + ".json")
        shell: pwsh

      - name: Set Environment Variables
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Set-EnvVars `
            -Environment "${{ inputs.environment }}" `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix

          # Env vars set in following steps, listed here for convenience
          # OE_RG_NAME_MAIN
          # OE_RG_NAME_NETWORK
          # OE_RG_NAME_OBSERVABILITY
          # OE_RG_NAME_WORKLOAD
          # OE_LAW_NAME
          # OE_LAW_RESOURCE_ID
          # OE_UAI_NAME
          # OE_UAI_RESOURCE_ID
          # OE_UAI_CLIENT_ID
          # OE_UAI_PRINCIPAL_ID
          # OE_KEYVAULT_NAME
          # OE_KEYVAULT_RESOURCE_ID
          # OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID
          # OE_STORAGE_ACCOUNT_NAME
          # OE_STORAGE_ACCOUNT_RESOURCE_ID
        shell: pwsh

      - name: Create Resource Groups
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $rgNameMain = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence $configAll.SeqNumRgMain
          $rgNameNetwork = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence $configAll.SeqNumRgNetwork
          $rgNameObservability = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence $configAll.SeqNumRgObservability
          $rgNameWorkload = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence $configAll.SeqNumRgWorkload

          Set-EnvVar2 -VarName "OE_RG_NAME_MAIN" -VarValue "$rgNameMain"
          Set-EnvVar2 -VarName "OE_RG_NAME_NETWORK" -VarValue "$rgNameNetwork"
          Set-EnvVar2 -VarName "OE_RG_NAME_OBSERVABILITY" -VarValue "$rgNameObservability"
          Set-EnvVar2 -VarName "OE_RG_NAME_WORKLOAD" -VarValue "$rgNameWorkload"

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameMain `
            --tags ${{ env.OE_TAGS_FOR_CLI }}

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameNetwork `
            --tags ${{ env.OE_TAGS_FOR_CLI }}

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameObservability `
            --tags ${{ env.OE_TAGS_FOR_CLI }}

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameWorkload `
            --tags ${{ env.OE_TAGS_FOR_CLI }}
        shell: pwsh

      - name: Deploy Observability
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $workspaceName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "law" -Sequence $configAll.SeqNumLogAnalytics
          $workspaceResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_OBSERVABILITY }}" -ResourceProviderName "microsoft.operationalinsights" -ResourceTypeName "workspaces" -ResourceName $workspaceName

          Set-EnvVar2 -VarName "OE_LAW_NAME" -VarValue "$workspaceName"
          Set-EnvVar2 -VarName "OE_LAW_RESOURCE_ID" -VarValue "$workspaceResourceId"

          Deploy-LogAnalyticsWorkspace `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_OBSERVABILITY }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "monitor.log-analytics-workspace.json") `
            -WorkspaceName $workspaceName `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_OBSERVABILITY }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $workspaceResourceId `
            -DiagnosticsSettingName ("diag-" + "$workspaceName") `
            -LogAnalyticsWorkspaceResourceId $workspaceResourceId `
            -SendLogs $true `
            -SendMetrics $true
        shell: pwsh

      - name: Deploy User Assigned Identity
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $uaiName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "mid" -Sequence $configall.SeqNumUai
          $uaiResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.ManagedIdentity" -ResourceTypeName "userAssignedIdentities" -ResourceName $uaiName

          Set-EnvVar2 -VarName "OE_UAI_NAME" -VarValue "$uaiName"
          Set-EnvVar2 -VarName "OE_UAI_RESOURCE_ID" -VarValue "$uaiResourceId"

          Deploy-UAI `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "identity.user-assigned-identity.json") `
            -TenantId "${{ secrets.OE_AZURE_TENANT_ID }}" `
            -UAIName $uaiName `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "Sleep to allow UAI deploy to complete"
          Start-Sleep -s 60

          $uai = "$(az identity show -g ${{ env.OE_RG_NAME_MAIN }} -n $uaiName)" | ConvertFrom-Json

          Set-EnvVar2 -VarName "OE_UAI_CLIENT_ID" -VarValue $uai.clientId
          Set-EnvVar2 -VarName "OE_UAI_PRINCIPAL_ID" -VarValue $uai.principalId
        shell: pwsh

      - name: Deploy Role Assignments
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Certificates Officer"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultCertificatesOfficer `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Crypto Officer"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultCryptoOfficer `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Secrets Officer"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultSecretsOfficer `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Monitoring Metrics Publisher"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdMonitoringMetricsPublisher `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Data Contributor"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdStorageBlobDataContributor `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Queue Contributor"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdStorageQueueDataContributor `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | App Services RP App Reg | Key Vault Secrets User"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $configAll.PrincipalIdAppServicesRp

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | Diagnostic Services Trusted Storage Access | Storage Blob Data Contributor"
          Deploy-RoleAssignmentSub `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $configAll.PrincipalIdDiagnosticServicesTrustedStorageAccess
        shell: pwsh

      - name: Deploy Network
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Network.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Deploy-Network `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }} `
            -LogAnalyticsWorkspaceName "${{ env.OE_LAW_NAME }}" `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          # TODO may need to nuance this a bit more than simply grabbing the first subnet
          $subnetResourceIds = Get-SubnetResourceIds -ConfigAll $configAll -ConfigMatrix $configMatrix -SubscriptionId ${{ secrets.OE_AZURE_SUBSCRIPTION_ID }} -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }}
          $subnetResourceId = $subnetResourceIds[0]
          Set-EnvVar2 -VarName "OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID" -VarValue $subnetResourceId
        shell: pwsh

      - name: Deploy Private DNS zones
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Deploy-PrivateDnsZones `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      - name: Deploy Azure Monitor Private Link Scope
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Network.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $privateLinkScopeName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pls" -Sequence $configAll.SeqNumAmpls
          $privateLinkScopeResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_OBSERVABILITY }}" -ResourceProviderName "microsoft.insights" -ResourceTypeName "privatelinkscopes" -ResourceName $privateLinkScopeName

          $privateEndpointName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pep" -Sequence $configAll.SeqNumAmpls

          $privateLinkScopeNicName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "nic" -Sequence $configAll.SeqNumAmpls
          $privateLinkScopeNicResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_OBSERVABILITY }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $privateLinkScopeNicName

          Deploy-Ampls `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_OBSERVABILITY }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "monitor.private-link-scope.json") `
            -PrivateLinkScopeName $privateLinkScopeName `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          Deploy-ConnectLawToAmpls `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_OBSERVABILITY }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "monitor.private-link-scope.scoped-resource.json") `
            -PrivateLinkScopeName $privateLinkScopeName `
            -ScopedResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -ScopedResourceName "${{ env.OE_LAW_NAME }}"

          Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_OBSERVABILITY }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "$privateLinkScopeResourceId" `
            -ProtectedWorkloadSubResource "azuremonitor" `
            -PrivateEndpointName $privateEndpointName `
            -NetworkInterfaceName $privateLinkScopeNicName `
            -SubnetResourceId ${{ env.OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_OBSERVABILITY }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $privateLinkScopeNicResourceId `
            -DiagnosticsSettingName ("diag-" + "$privateLinkScopeNicName") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $false `
            -SendMetrics $true
        shell: pwsh

      - name: Deploy Key Vault
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/KeyVault.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $subnetResourceIds = Get-SubnetResourceIds `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }}

          $subnetResourceIdsCsv = $($subnetResourceIds -join ",")
          Write-Debug -Debug:$true -Message "$subnetResourceIdsCsv"

          $keyVaultName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "kvt" -Sequence $configAll.SeqNumKeyVault
          $keyVaultResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.KeyVault" -ResourceTypeName "vaults" -ResourceName $keyVaultName

          $privateEndpointName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pep" -Sequence $configAll.SeqNumKeyVault

          $keyVaultNicName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "nic" -Sequence $configAll.SeqNumKeyVault
          $keyVaultNicResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $keyVaultNicName

          Set-EnvVar2 -VarName "OE_KEYVAULT_NAME" -VarValue "$keyVaultName"
          Set-EnvVar2 -VarName "OE_KEYVAULT_RESOURCE_ID" -VarValue "$keyVaultResourceId"

          Deploy-KeyVault `
            -TenantId "${{ secrets.OE_AZURE_TENANT_ID }}" `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "key-vault.json") `
            -KeyVaultName "$keyVaultName" `
            -EnabledForDeployment $false `
            -EnabledForDiskEncryption $false `
            -EnabledForTemplateDeployment $false `
            -EnableSoftDelete $false `
            -SoftDeleteRetentionInDays 7 `
            -EnableRbacAuthorization $true `
            -PublicNetworkAccess "Enabled" `
            -DefaultAction "Deny" `
            -AllowedIpAddressRangesCsv "" `
            -AllowedSubnetResourceIdsCsv "$subnetResourceIdsCsv" `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          # Key Vault Diagnostics
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId "$keyVaultResourceId" `
            -DiagnosticsSettingName ("diag-" + "$keyVaultName") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $true `
            -SendMetrics $true

          Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "$keyVaultResourceId" `
            -ProtectedWorkloadSubResource "vault" `
            -PrivateEndpointName $privateEndpointName `
            -NetworkInterfaceName $keyVaultNicName `
            -SubnetResourceId ${{ env.OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          Watch-NicUntilProvisionSuccess `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -NetworkInterfaceName $keyVaultNicName

          # NIC Diagnostics
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $keyVaultNicResourceId `
            -DiagnosticsSettingName ("diag-" + "$keyVaultNicName") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $false `
            -SendMetrics $true
        shell: pwsh

      - name: Deploy Storage
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Storage.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $subnetResourceIds = Get-SubnetResourceIds `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }}

          $subnetResourceIdsCsv = $($subnetResourceIds -join ",")
          Write-Debug -Debug:$true -Message "$subnetResourceIdsCsv"

          $storageAccountName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "sa" -Sequence $configAll.SeqNumStorage -IncludeDelimiter $false
          $storageAccountResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Storage" -ResourceTypeName "storageAccounts" -ResourceName $storageAccountName

          # Blob
          $privateEndpointNameBlob = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pep" -Sequence $configAll.SeqNumStorage -Suffix "blob"
          $storageAccountNicNameBlob = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "nic" -Sequence $configAll.SeqNumStorage -Suffix "blob"
          $storageAccountNicResourceIdBlob = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $storageAccountNicNameBlob

          # File
          $privateEndpointNameFile = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pep" -Sequence $configAll.SeqNumStorage -Suffix "file"
          $storageAccountNicNameFile = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "nic" -Sequence $configAll.SeqNumStorage -Suffix "file"
          $storageAccountNicResourceIdFile = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $storageAccountNicNameFile

          # Queue
          $privateEndpointNameQueue = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pep" -Sequence $configAll.SeqNumStorage -Suffix "queue"
          $storageAccountNicNameQueue = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "nic" -Sequence $configAll.SeqNumStorage -Suffix "queue"
          $storageAccountNicResourceIdQueue = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $storageAccountNicNameQueue

          # Table
          $privateEndpointNameTable = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pep" -Sequence $configAll.SeqNumStorage -Suffix "table"
          $storageAccountNicNameTable = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "nic" -Sequence $configAll.SeqNumStorage -Suffix "table"
          $storageAccountNicResourceIdTable = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $storageAccountNicNameTable

          Set-EnvVar2 -VarName "OE_STORAGE_ACCOUNT_NAME" -VarValue "$storageAccountName"
          Set-EnvVar2 -VarName "OE_STORAGE_ACCOUNT_RESOURCE_ID" -VarValue "$storageAccountResourceId"

          Deploy-StorageAccount `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "storage.account.json") `
            -StorageAccountName "$storageAccountName" `
            -SkuName $configMatrix.Storage.SkuName `
            -AllowedSubnetResourceIdsCsv "$subnetResourceIdsCsv" `
            -AllowedIpAddressRangesCsv "" `
            -DefaultAction "Deny" `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          # Storage Account Diagnostics
          Deploy-StorageDiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "storage.diagnostic-settings.json") `
            -ResourceId "$storageAccountResourceId" `
            -DiagnosticsSettingName ("diag-" + "$storageAccountName") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}"

          # Deploy Storage Private Endpoint and NIC - Blob
          Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "$storageAccountResourceId" `
            -ProtectedWorkloadSubResource "blob" `
            -PrivateEndpointName $privateEndpointNameBlob `
            -NetworkInterfaceName $storageAccountNicNameBlob `
            -SubnetResourceId ${{ env.OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          $nicState = Watch-NicUntilProvisionSuccess `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -NetworkInterfaceName $storageAccountNicNameBlob

          # NIC Diagnostics - Blob
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $storageAccountNicResourceIdBlob `
            -DiagnosticsSettingName ("diag-" + "$storageAccountNicNameBlob") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $false `
            -SendMetrics $true

          # Deploy Storage Private Endpoint and NIC - File
          Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "$storageAccountResourceId" `
            -ProtectedWorkloadSubResource "file" `
            -PrivateEndpointName $privateEndpointNameFile `
            -NetworkInterfaceName $storageAccountNicNameFile `
            -SubnetResourceId ${{ env.OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          $nicState = Watch-NicUntilProvisionSuccess `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -NetworkInterfaceName $storageAccountNicNameFile

          # NIC Diagnostics - File
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $storageAccountNicResourceIdFile `
            -DiagnosticsSettingName ("diag-" + "$storageAccountNicNameFile") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $false `
            -SendMetrics $true

          # Deploy Storage Private Endpoint and NIC - Queue
          Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "$storageAccountResourceId" `
            -ProtectedWorkloadSubResource "queue" `
            -PrivateEndpointName $privateEndpointNameQueue `
            -NetworkInterfaceName $storageAccountNicNameQueue `
            -SubnetResourceId ${{ env.OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          $nicState = Watch-NicUntilProvisionSuccess `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -NetworkInterfaceName $storageAccountNicNameQueue

          # NIC Diagnostics - Queue
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $storageAccountNicResourceIdQueue `
            -DiagnosticsSettingName ("diag-" + "$storageAccountNicNameQueue") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $false `
            -SendMetrics $true

          # Deploy Storage Private Endpoint and NIC - Table
          Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "$storageAccountResourceId" `
            -ProtectedWorkloadSubResource "table" `
            -PrivateEndpointName $privateEndpointNameTable `
            -NetworkInterfaceName $storageAccountNicNameTable `
            -SubnetResourceId ${{ env.OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          $nicState = Watch-NicUntilProvisionSuccess `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -NetworkInterfaceName $storageAccountNicNameTable

          # NIC Diagnostics - Table
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $storageAccountNicResourceIdTable `
            -DiagnosticsSettingName ("diag-" + "$storageAccountNicNameTable") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $false `
            -SendMetrics $true
        shell: pwsh

      - name: Deploy Database
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Database.ps1

          $configAll = Get-Config -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = Get-ConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $dbServerName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "db" -Sequence $configAll.SeqNumDatabase
          $dbServerResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_WORKLOAD }}" -ResourceProviderName "Microsoft.DBforMariaDB" -ResourceTypeName "servers" -ResourceName $dbServerName

          $privateEndpointName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "pep" -Sequence $configAll.SeqNumDatabase

          $dbServerNicName = Get-ResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "nic" -Sequence $configAll.SeqNumDatabase
          $dbServerNicResourceId = Get-ResourceId -SubscriptionId "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.OE_RG_NAME_WORKLOAD }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $dbServerNicName

          Deploy-Database `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_WORKLOAD }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "db.mariadb.server.json") `
            -ServerName "$dbServerName" `
            -AdministratorLogin "${{ secrets.OE_DB_ADMIN_LOGIN }}" `
            -AdministratorPassword "${{ secrets.OE_DB_ADMIN_PASSWORD }}" `
            -SkuTier $configMatrix.Database.SkuTier `
            -SkuFamily $configMatrix.Database.SkuFamily `
            -SkuName $configMatrix.Database.SkuName `
            -SkuCapacity $configMatrix.Database.SkuCapacity `
            -SkuSizeMB $configMatrix.Database.SkuSizeMB `
            -MariaDbVersion $configMatrix.Database.MariaDbVersion `
            -CreateMode $configMatrix.Database.CreateMode `
            -BackupRetentionDays $configMatrix.Database.BackupRetentionDays `
            -GeoRedundantBackup $configMatrix.Database.GeoRedundantBackup `
            -StorageAutogrow $configMatrix.Database.StorageAutogrow `
            -MinimumTlsVersion $configMatrix.Database.MinimumTlsVersion `
            -PublicNetworkAccess $configMatrix.Database.PublicNetworkAccess `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          # Database Server Diagnostics
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_WORKLOAD }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId "$dbServerResourceId" `
            -DiagnosticsSettingName ("diag-" + "$dbServerName") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $true `
            -SendMetrics $true

          Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_WORKLOAD }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "$dbServerResourceId" `
            -ProtectedWorkloadSubResource "mariadbServer" `
            -PrivateEndpointName $privateEndpointName `
            -NetworkInterfaceName $dbServerNicName `
            -SubnetResourceId ${{ env.OE_PRIVATE_ENDPOINT_SUBNET_RESOURCE_ID }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          Watch-NicUntilProvisionSuccess `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_WORKLOAD }} `
            -NetworkInterfaceName $dbServerNicName

          # NIC Diagnostics
          Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_WORKLOAD }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $dbServerNicResourceId `
            -DiagnosticsSettingName ("diag-" + "$dbServerNicName") `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -SendLogs $false `
            -SendMetrics $true
        shell: pwsh


      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
...