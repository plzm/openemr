---
name: Deploy Infrastructure

on: 
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  prep_matrix:
    name: Prepare Matrix
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Write matrix string to output
        id: set-matrix
        run: |
          $path = "./config/infra_" + "${{ inputs.environment }}" + ".json"
          echo "::debug::path=$path"
          $configEnv = Get-Content -Path $path | ConvertFrom-Json
          echo "::debug::configEnv=$configEnv"
          $matrix = ($configEnv | Select-Object DeployUnit | ConvertTo-Json -Depth 100 -Compress).Replace("`"", "'")
          echo "::debug::matrix=$matrix"
          $matrix = "{'include':" + $matrix + "}"
          echo "matrix=$matrix" >> $env:GITHUB_OUTPUT
        shell: pwsh

  deploy_matrix:
    needs: prep_matrix
    name: Deploy Infrastructure
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ${{ fromJson(needs.prep_matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Config File Paths to Environment
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          Set-EnvVar2 -VarName "OE_CONFIG_FILE_ALL" -VarValue "./config/infra_all.json"
          Set-EnvVar2 -VarName "OE_CONFIG_FILE_ENV" -VarValue ("./config/infra_" + "${{ inputs.environment }}" + ".json")
        shell: pwsh

      - name: Set Environment Variables
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Set-EnvVars `
            -Environment "${{ inputs.environment }}" `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix
        shell: pwsh

      - name: Create Resource Groups
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $rgNameMain = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence "01"
          $rgNameNetwork = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence "02"

          Set-EnvVar2 -VarName "OE_RG_NAME_MAIN" -VarValue "$rgNameMain"
          Set-EnvVar2 -VarName "OE_RG_NAME_NETWORK" -VarValue "$rgNameNetwork"

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameMain `
            --tags ${{ env.OE_TAGS_FOR_CLI }}

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameNetwork `
            --tags ${{ env.OE_TAGS_FOR_CLI }}
        shell: pwsh

      - name: Deploy User Assigned Identity
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $uaiName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "mid" -Sequence "01"

          Set-EnvVar2 -VarName "OE_UAI_NAME" -VarValue "$uaiName"

          DeployUAI `
          -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
          -Location $configMatrix.Location `
          -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
          -TemplateUri ($configAll.TemplateUriPrefix + "identity.user-assigned-mi.json") `
          -TenantId "${{ secrets.OE_AZURE_TENANT_ID }}" `
          -UAIName $uaiName `
          -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      - name: Deploy Network
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          DeployNetwork `
            -Environment ${{ inputs.environment }} `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
...