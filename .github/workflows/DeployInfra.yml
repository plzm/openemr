---
name: Deploy Infrastructure

on: 
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  prep_matrix:
    name: Prepare Matrix
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Write matrix string to output
        id: set-matrix
        run: |
          $path = "./config/infra_" + "${{ inputs.environment }}" + ".json"
          echo "::debug::path=$path"
          $configEnv = Get-Content -Path $path | ConvertFrom-Json
          echo "::debug::configEnv=$configEnv"
          $matrix = ($configEnv | Select-Object DeployUnit | ConvertTo-Json -Depth 100 -Compress).Replace("`"", "'")
          echo "::debug::matrix=$matrix"
          $matrix = "{'include':" + $matrix + "}"
          echo "matrix=$matrix" >> $env:GITHUB_OUTPUT
        shell: pwsh

  deploy_matrix:
    needs: prep_matrix
    name: Deploy Infrastructure
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ${{ fromJson(needs.prep_matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Powershell error action
        if: success()
        run: |
          $global:ErrorActionPreference = "Stop"
        shell: pwsh

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Register RPs
        if: success()
        run: |
          az provider register --namespace "Microsoft.ChangeAnalysis" --accept-terms --consent-to-permissions --wait
        shell: pwsh

      - name: Set Config File Paths to Environment
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          Set-EnvVar2 -VarName "OE_CONFIG_FILE_ALL" -VarValue "./config/infra_all.json"
          Set-EnvVar2 -VarName "OE_CONFIG_FILE_ENV" -VarValue ("./config/infra_" + "${{ inputs.environment }}" + ".json")
        shell: pwsh

      - name: Set Environment Variables
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Set-EnvVars `
            -Environment "${{ inputs.environment }}" `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix

          # Env vars set below, listed here for convenience
          # OE_RG_NAME_MAIN
          # OE_RG_NAME_NETWORK
          # OE_LAW_NAME
          # OE_LAW_RESOURCE_ID
          # OE_UAI_NAME
          # OE_UAI_RESOURCE_ID
          # OE_UAI_CLIENT_ID
          # OE_UAI_PRINCIPAL_ID
          # OE_KEYVAULT_NAME
          # OE_KEYVAULT_RESOURCE_ID

        shell: pwsh

      - name: Create Resource Groups
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $rgNameMain = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence "01"
          $rgNameNetwork = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence "02"

          Set-EnvVar2 -VarName "OE_RG_NAME_MAIN" -VarValue "$rgNameMain"
          Set-EnvVar2 -VarName "OE_RG_NAME_NETWORK" -VarValue "$rgNameNetwork"

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameMain `
            --tags ${{ env.OE_TAGS_FOR_CLI }}

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgNameNetwork `
            --tags ${{ env.OE_TAGS_FOR_CLI }}
        shell: pwsh

      - name: Deploy Observability
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $workspaceName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "law" -Sequence "01"
          $workspaceResourceId = "/subscriptions/" + "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" + "/resourceGroups/" + "${{ env.OE_RG_NAME_MAIN }}" + "/providers/microsoft.operationalinsights/workspaces/" + "$workspaceName"

          Set-EnvVar2 -VarName "OE_LAW_NAME" -VarValue "$workspaceName"
          Set-EnvVar2 -VarName "OE_LAW_RESOURCE_ID" -VarValue "$workspaceResourceId"

          DeployLogAnalyticsWorkspace `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "monitor.log-analytics-workspace.json") `
            -WorkspaceName $workspaceName `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          DeployDiagnosticsSetting `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $workspaceResourceId `
            -DiagnosticsSettingName ("diag-" + "$workspaceName") `
            -LogAnalyticsWorkspaceResourceId $workspaceResourceId `
            -SendLogs $true `
            -SendMetrics $true

        shell: pwsh

      - name: Deploy User Assigned Identity
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $uaiName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "mid" -Sequence "01"
          $uaiResourceId = "/subscriptions/" + "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" + "/resourcegroups/" + "${{ env.OE_RG_NAME_MAIN }}" + "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/" + "$uaiName"

          Set-EnvVar2 -VarName "OE_UAI_NAME" -VarValue "$uaiName"
          Set-EnvVar2 -VarName "OE_UAI_RESOURCE_ID" -VarValue "$uaiResourceId"

          DeployUAI `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "identity.user-assigned-identity.json") `
            -TenantId "${{ secrets.OE_AZURE_TENANT_ID }}" `
            -UAIName $uaiName `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "Sleep to allow UAI deploy to complete"
          Start-Sleep -s 60

          $uai = "$(az identity show -g ${{ env.OE_RG_NAME_MAIN }} -n $uaiName)" | ConvertFrom-Json

          Set-EnvVar2 -VarName "OE_UAI_CLIENT_ID" -VarValue $uai.clientId
          Set-EnvVar2 -VarName "OE_UAI_PRINCIPAL_ID" -VarValue $uai.principalId
        shell: pwsh

      - name: Deploy Role Assignments
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Certificates Officer"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultCertificatesOfficer `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Crypto Officer"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultCryptoOfficer `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Secrets Officer"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultSecretsOfficer `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Monitoring Metrics Publisher"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdMonitoringMetricsPublisher `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Data Contributor"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdStorageBlobDataContributor `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Queue Contributor"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdStorageQueueDataContributor `
            -PrincipalId "${{ env.OE_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | App Services RP App Reg | Key Vault Secrets User"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $configAll.PrincipalIdAppServicesRp

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | Diagnostic Services Trusted Storage Access | Storage Blob Data Contributor"
          DeployRoleAssignmentSubToPrincipalId `
            -Location $configMatrix.Location `
            -TemplateUri ($configAll.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configAll.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $configAll.PrincipalIdDiagnosticServicesTrustedStorageAccess
        shell: pwsh

      - name: Deploy Network
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Network.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Deploy-Network `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }} `
            -LogAnalyticsWorkspaceName "${{ env.OE_LAW_NAME }}" `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      - name: Deploy Private DNS zones
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          Deploy-PrivateDnsZones `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }} `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      - name: Deploy Key Vault
        if: success()
        run: |
          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/KeyVault.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $subnetResourceIds = Get-SubnetResourceIds `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.OE_RG_NAME_NETWORK }}

          $subnetResourceIdsCsv = $($subnetResourceIds -join ",")
          Write-Debug -Debug:$true -Message "$subnetResourceIdsCsv"

          $keyVaultName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "kvt" -Sequence "01"
          $keyVaultResourceId = "/subscriptions/" + "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" + "/resourcegroups/" + "${{ env.OE_RG_NAME_MAIN }}" + "/providers/Microsoft.KeyVault/vaults/" + "$keyVaultName"

          Set-EnvVar2 -VarName "OE_KEYVAULT_NAME" -VarValue "$keyVaultName"
          Set-EnvVar2 -VarName "OE_KEYVAULT_RESOURCE_ID" -VarValue "$keyVaultResourceId"

          DeployKeyVault `
            -TenantId "${{ secrets.OE_AZURE_TENANT_ID }}" `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMatrix.Location `
            -ResourceGroupName ${{ env.OE_RG_NAME_MAIN }} `
            -TemplateUri ($configAll.TemplateUriPrefix + "key-vault.json") `
            -KeyVaultName "$keyVaultName" `
            -EnabledForDeployment $false `
            -EnabledForDiskEncryption $false `
            -EnabledForTemplateDeployment $false `
            -EnableSoftDelete $false `
            -SoftDeleteRetentionInDays 7 `
            -EnableRbacAuthorization $true `
            -PublicNetworkAccess "Enabled" `
            -DefaultAction "Deny" `
            -AllowedIpAddressRangesCsv "" `
            -AllowedSubnetResourceIdsCsv "$subnetResourceIdsCsv" `
            -LogAnalyticsWorkspaceName "${{ env.OE_LAW_NAME }}" `
            -LogAnalyticsWorkspaceResourceId "${{ env.OE_LAW_RESOURCE_ID }}" `
            -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
...