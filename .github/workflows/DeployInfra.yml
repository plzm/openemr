---
name: Deploy Infrastructure

on: 
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  prep_matrix:
    name: Prepare Matrix
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Write matrix string to output
        id: set-matrix
        run: |
          $path = "./config/infra_" + "${{ inputs.environment }}" + ".json"
          echo "::debug::path=$path"
          $configEnv = Get-Content -Path $path | ConvertFrom-Json
          echo "::debug::configEnv=$configEnv"
          $matrix = ($configEnv | Select-Object DeployUnit | ConvertTo-Json -Depth 100 -Compress).Replace("`"", "'")
          echo "::debug::matrix=$matrix"
          $matrix = "{'include':" + $matrix + "}"
          echo "matrix=$matrix" >> $env:GITHUB_OUTPUT
        shell: pwsh

  deploy_matrix:
    needs: prep_matrix
    name: Deploy Infrastructure
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ${{ fromJson(needs.prep_matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Config File Paths to Environment
        if: success()
        run: |
          . ./scripts/EnvVars.ps1

          SetEnvVar2 -VarName "OE_CONFIG_FILE_ALL" -VarValue "./config/infra_all.json"
          SetEnvVar2 -VarName "OE_CONFIG_FILE_ENV" -VarValue ("./config/infra_" + "${{ inputs.environment }}" + ".json")
        shell: pwsh

      - name: Set Environment Variables
        if: success()
        run: |
          . ./scripts/Config.ps1
          . ./scripts/EnvVars.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          SetEnvVarsMatrix `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix

          SetEnvVarTags `
            -Environment "${{ inputs.environment }}" `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix
        shell: pwsh

      - name: Create Resource Groups
        if: success()
        run: |
          . ./scripts/Config.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $rgName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence "01"

          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l $configMatrix.Location `
            -n $rgName `
            --tags ${{ env.OE_TAGS_FOR_CLI }}
        shell: pwsh

      - name: Deploy User Assigned Identity
        if: success()
        run: |
          . ./scripts/Config.ps1
          . ./scripts/infra/DeployUAI.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $rgName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence "01"
          $uaiName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "mid" -Sequence "01"

          DeployUAI `
          -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
          -Location $configMatrix.Location `
          -ResourceGroupName $rgName `
          -TemplateUri ($configAll.TemplateUriPrefix + "identity.user-assigned-mi.json") `
          -TenantId "${{ secrets.OE_AZURE_TENANT_ID }}" `
          -UAIName $uaiName `
          -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      - name: Deploy Network
        if: success()
        run: |
          . ./scripts/Config.ps1
          . ./scripts/infra/DeployNetwork.ps1

          $configAll = GetConfig -ConfigFilePath "${{ env.OE_CONFIG_FILE_ALL }}"
          $configMatrix = GetConfigMatrix -ConfigFilePath "${{ env.OE_CONFIG_FILE_ENV }}" -DeployUnit "${{ matrix.DeployUnit }}"

          $rgName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "" -Sequence "01"
          $vnetName = GetResourceName -ConfigAll $configAll -ConfigMatrix $configMatrix -Prefix "vnt" -Sequence "01"

          DeployVNet `
          -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
          -Location $configMatrix.Location `
          -ResourceGroupName $rgName `
          -TemplateUri ($configAll.TemplateUriPrefix + "net.vnet.json") `
          -VNetName $vnetName `
          -VNetPrefix "$configMatrix.Network.AddressSpace" `
          -EnableDdosProtection $false `
          -Tags ${{ env.OE_TAGS_FOR_ARM }}

          foreach ($subnet in $configMatrix.Network.Subnets)
          {
            DeploySubnet `
            -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName $rgName `
            -TemplateUri ($configAll.TemplateUriPrefix + "net.vnet.subnet.json") `
            -VNetName $vnetName `
            -SubnetName $subnet.Name `
            -SubnetPrefix $subnet.AddressSpace `
            -NsgResourceId "" `
            -RouteTableResourceId "" `
            -DelegationService $subnet.Delegation
          }
        shell: pwsh

      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear

      #- name: Test Env Var in pwsh
      #  if: success()
      #  run: |
      #    Write-Output ${{ env.FOO }}
      #    Write-Output $env:FOO
      #  shell: pwsh

      #- name: Test Env Var in bash
      #  if: success()
      #  run: |
      #    echo ${{ env.FOO }}
      #    echo $FOO
      #  shell: bash
...