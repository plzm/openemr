---
name: Deploy Infrastructure

on: 
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  prep_matrix:
    name: Prepare Matrix
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "matrix={'include':[{'location':'westus'},{'location':'westus2'}]}" >> "$GITHUB_OUTPUT"

  deploy_matrix:
    needs: prep_matrix
    name: Deploy Infrastructure
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ${{ fromJson(needs.prep_matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Environment Variables
        if: success()
        run: |
          . ./scripts/EnvVars.ps1

          $configAll = Get-Content -Path "./config/infra_all.json" | ConvertFrom-Json
          $configEnv = Get-Content -Path ("./config/infra_" + "${{ inputs.environment }}" + ".json") | ConvertFrom-Json
          $configMatrix = ($configEnv | Where-Object { $_.Location -eq "${{ matrix.location }}" })

          SetEnvVarsMatrix `
            -ConfigAll $configAll `
            -ConfigMatrix $configMatrix

          SetEnvVarTags `
            -Environment "${{ inputs.environment }}"
        shell: pwsh

      - name: Create Resource Groups
        if: success()
        run: |
          az group create `
            --subscription "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
            -l "${{ matrix.location }}" `
            -n "${{ env.OE_RG_NAME }}" `
            --tags ${{ env.OE_TAGS_FOR_CLI }}
        shell: pwsh

      - name: Deploy User Assigned Identity
        if: success()
        run: |
          . ./scripts/infra/DeployUAI.ps1

          DeployUAI `
          -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
          -Location "${{ matrix.location }}" `
          -ResourceGroupName "${{ env.OE_RG_NAME }}" `
          -TemplateUri "${{ env.OE_ARM_TEMPLATE_URI_PREFIX }}identity.user-assigned-mi.json" `
          -TenantId "${{ secrets.OE_AZURE_TENANT_ID }}" `
          -UAIName "${{ env.OE_UAI_NAME }}" `
          -Tags ${{ env.OE_TAGS_FOR_ARM }}
        shell: pwsh

      #- name: Deploy Network
      #  if: success()
      #  run: |
      #    . ./scripts/infra/DeployNetwork.ps1

      #    DeployVNet `
      #    -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
      #    -Location "${{ matrix.location }}" `
      #    -ResourceGroupName "${{ env.OE_RG_NAME }}" `
      #    -TemplateUri "${{ env.OE_ARM_TEMPLATE_URI_PREFIX }}net.vnet.json" `
      #    -VNetName "${{ env.OE_VNET_NAME }}" `
      #    -VNetPrefix "${{ env.OE_VNET_ADDRESS_SPACE }}" `
      #    -EnableDdosProtection $false `
      #    -Tags ${{ env.OE_TAGS_FOR_ARM }}

      #    DeploySubnet `
      #    -SubscriptionID "${{ secrets.OE_AZURE_SUBSCRIPTION_ID }}" `
      #    -ResourceGroupName "${{ env.OE_RG_NAME }}" `
      #    -TemplateUri "${{ env.OE_ARM_TEMPLATE_URI_PREFIX }}net.vnet.subnet.json" `
      #    -VNetName "${{ env.OE_VNET_NAME }}" `
      #    -SubnetName "subnet01" `
      #    -SubnetPrefix "" `
      #    -NsgResourceId "" `
      #    -RouteTableResourceId "" `
      #    -DelegationService ""
      #  shell: pwsh

      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear

      #- name: Test Env Var in pwsh
      #  if: success()
      #  run: |
      #    Write-Output ${{ env.FOO }}
      #    Write-Output $env:FOO
      #  shell: pwsh

      #- name: Test Env Var in bash
      #  if: success()
      #  run: |
      #    echo ${{ env.FOO }}
      #    echo $FOO
      #  shell: bash
...